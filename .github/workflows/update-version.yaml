name: Update Version

on:
  push:
    branches:
      - develop
    paths:
      - 'VERSION'

permissions: write-all

jobs:
  update-readme-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check for merge commit
        id: check_merge
        run: |
          if [ "$(git rev-list --count HEAD^@)" -gt 1 ]; then
            echo "This is a merge commit. Skipping workflow."
            exit 0
          fi

      - name: Read version from VERSION file
        id: read_version
        run: |
          NEW_VERSION=$(cat VERSION)
          echo "New version is $NEW_VERSION"
          echo "::set-output name=NEW_VERSION::$NEW_VERSION"

      - name: Get the branch name
        id: get_branch
        run: |
          BRANCH_NAME=$(echo $GITHUB_REF | sed 's/refs\/heads\///')
          echo "::set-output name=BRANCH_NAME::$BRANCH_NAME"

      - name: Update README.md with new version
        run: |
          NEW_VERSION=${{ steps.read_version.outputs.NEW_VERSION }}
          sed -i "s/v[0-9]*\.[0-9]*\.[0-9]*/${NEW_VERSION}/g" README.md

      - name: Update main.py with new version
        run: |
          NEW_VERSION=${{ steps.read_version.outputs.NEW_VERSION }}
          sed -i "s/VERSION = \"v[0-9]*\.[0-9]*\.[0-9]*\"/VERSION = \"${NEW_VERSION}\"/" src/shiba2sashimi/main.py

      - name: Update Dockerfile with new version
        run: |
          NEW_VERSION=${{ steps.read_version.outputs.NEW_VERSION }}
          sed -i "s/v[0-9]*\.[0-9]*\.[0-9]*/${NEW_VERSION}/" docker/Dockerfile

      - name: Update issue templates with new version
        run: |
          NEW_VERSION=${{ steps.read_version.outputs.NEW_VERSION }}
          sed -i "s/v[0-9]*\.[0-9]*\.[0-9]*/${NEW_VERSION}/" .github/ISSUE_TEMPLATE/*.yaml

      - name: Update pyproject.toml with new version
        run: |
          NEW_VERSION=${{ steps.read_version.outputs.NEW_VERSION }}
          NEW_VERSION=$(echo $NEW_VERSION | sed 's/v//')
          sed -i "s/[0-9]*\.[0-9]*\.[0-9]*/${NEW_VERSION}/" pyproject.toml

      - name: Commit changes
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add README.md src/shiba2sashimi/main.py docker/Dockerfile .github/ISSUE_TEMPLATE/*.yaml pyproject.toml
          git commit -m "actions: Ready for ${{ steps.read_version.outputs.NEW_VERSION }}"
          git push origin HEAD:${{ steps.get_branch.outputs.BRANCH_NAME }}
